1. find 옵션

return this.userRepository.find({
      // 어떤 프로퍼티를 선택할지 설택
      // 기본은 모든 프로퍼티를 가져온다.
      // 만약 select를 정의하지 않는다면 모든 것들을 가져오고
      // 정의하지 않았을 시 정의된 프로퍼티만 가져온다.
      select : {
        id : true,
        version : true,
        profile : {
          id : true
        }
      },
      // where의 키값에 대한 조건들은 AND로 묶이게 된다.
      // OR조건을 주고 싶다면 배열형태로 주면 된다.
      where : [
          {
            id : 1,
            //version : 1 이건 id = 1AND version = 1; 로 된다는 의미이다.
          },
          {
            version : 1 // 이땐 id = 1 OR version = 1; 로 된다.
          },
          {
            profile : {
              id : 3
            }
          }
      ],
      // 관계를 가져오는 법
      // 엔티티에서 eager을 true 한다면 따로 find에서 옵션을 주지 않아도
      // 값이 관계에 대한 값은 불러와진다.
      // relations 옵션을 추가하는 순간부터 select와 where등에 사용이 가능해진다.
      relations: {
        profile : true
      },
      // 오름차순, 내림차순 정의 가능
      order : {
        id : 'ASC'
      },
      // 처음 몇개를 생략할지 갯수를 작성한다.
      skip : 1,
      // 몇개를 가져올 지 갯수를 작성한다.
      take : 2,
    });

2. relation 옵션

@OneToOne(() => ProfileModel, (profile)=> profile.user, {
        // find() 실행할 때마다 항상 같이 가져올 relation을 자동으로 가져오도록 해준다.
        // 즉 자스 find쿼리에서 relations:{tags: true}  이렇게 안해도 자동으로 된다는 의미.
        eager : false,
        // 기본값은 false이다.
        // 저장할 때 relation을 한번에 같이 저장가능여부
        // 즉 연결된 다른 테이블에 pk를 넘겨서 한번에 자동으로 데이터들의 pk와 fk를 저장해줌
        cascade : true,
        // 기본값은 true
        // null 가능 여부
        // false를 하면 관계가 연결된 값을 함께 넣어주지 않으면 오류 발생
        nullable : true,
        // 관계가 삭제됐을 때 즉 profile 컬럼의 데이터가 삭제됐을 때
        // no action : 아무것도 안함
        // casecade : 참조하는 Row도 같이 삭제
        // set null : 참조하는 Row에서 참조 id를 null로 변경
        // set default : 기본 세팅으로 설정 (테이블의 기본 세팅)
        // restrict : 참조하고 있는 Row가 있는 경우 참조 당하는 Row 삭제 불가
        //            즉 참조를 당하고 있다면 삭제가 안된다는 의미.
        onDelete : 'CASCADE'
    })
    profile:ProfileModel;